/* **** **** **** **** **** **** **** **** **** **** **** **** *
 *.............................................................*
 *...........▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄..............*
 *..........▐░░░░░░░░░░░▌▐░░░░░░░░░░▌▐░░░░░░░░░░░▌.............*
 *...........▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▀▀▀▀█░█▀▀▀▀..............*
 *...............▐░▌.....▐░▌.......▐░▌....▐░▌..................*
 *...............▐░▌.....▐░█▄▄▄▄▄▄▄█░▌....▐░▌..................*
 *...............▐░▌.....▐░░░░░░░░░░▌.....▐░▌..................*
 *...............▐░▌.....▐░█▀▀▀▀▀▀▀█░▌....▐░▌..................*
 *...............▐░▌.....▐░▌.......▐░▌....▐░▌..................*
 *...............▐░▌.....▐░█▄▄▄▄▄▄▄█░▌....▐░▌..................*
 *...............▐░▌.....▐░░░░░░░░░░▌.....▐░▌..................*
 *................▀.......▀▀▀▀▀▀▀▀▀▀.......▀...................*
 *.............................................................*
 * **** **** **** **** **** **** **** **** **** **** **** **** */

//
//  TBTVector.h
//
//  Created by ISHII 2bit on 2013/09/10.
//  Copyright (c) 2013 buffer Renaiss co., ltd. All rights reserved.
//

#import <CoreGraphics/CoreGraphics.h>

typedef CGPoint TBTVector;

#define TBTGetVector(from, to) ((TBTVector){.x = to.x - from.x, .y = to.y - from.y})
#define TBTCalcDistance(p, q) (sqrtf((p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y))
#define TBTGetRadius(p) sqrtf(p.x * p.x + p.y * p.y))
#define TBTNormalizeVector(p) ((TBTVector){.x = p.x / TBTGetRadius(p), .y = p.y / TBTGetRadius(p)})
#define TBTCalcLerp(from, to, amount) ((TBTVector){.x = (1.0f - amount) * from.x + amount * to.x, .y = (1.0f - amount) * from.y + amount * to.y})
#define TBTGetHalfPoint(p, q) (TBTCalcLerp(p, q, 0.5f))